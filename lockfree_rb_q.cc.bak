#ifndef __x86_64__
#warning "The program is developed for x86-64 architecture only."
#endif
#if !defined(DCACHE1_LINESIZE) || !DCACHE1_LINESIZE
#ifdef DCACHE1_LINESIZE
#undef DCACHE1_LINESIZE
#endif
#define DCACHE1_LINESIZE 64
#endif

#define ____cacheline_aligned __attribute__((aligned(DCACHE1_LINESIZE)))

#include <immintrin.h>
#include <limits.h>
#include <malloc.h>
#include <string.h>
#include <sys/time.h>
#include <unistd.h>

#include <atomic>
#include <cassert>
#include <condition_variable>
#include <iostream>
#include <mutex>
#include <thread>

#define QUEUE_SIZE (32 * 1024)

template <class T, unsigned long Q_SIZE = QUEUE_SIZE>
class NaiveQueue {
 private:
  static const unsigned long Q_MASK = Q_SIZE - 1;

 public:
  NaiveQueue() : head_(0), tail_(0) {
    ptr_array_ = (T **)::memalign(getpagesize(), Q_SIZE * sizeof(void *));
    assert(ptr_array_);
  }

  void push(T *x) {
    std::unique_lock<std::mutex> lock(mtx_);
    cond_overflow_.wait(lock, [this]() { return tail_ + Q_SIZE > head_; });
    ptr_array_[head_++ & Q_MASK] = x;
    cond_empty_.notify_one();
  }

  T *pop() {
    std::unique_lock<std::mutex> lock(mtx_);
    cond_empty_.wait(lock, [this]() { return tail_ < head_; });
    T *x = ptr_array_[tail_++ & Q_MASK];
    cond_overflow_.notify_one();
    return x;
  }

 private:
  unsigned long head_, tail_;
  std::condition_variable cond_empty_;
  std::condition_variable cond_overflow_;
  std::mutex mtx_;
  T **ptr_array_;
};

#include <boost/lockfree/queue.hpp>

template<class T, unsigned long Q_SIZE = QUEUE_SIZE>
class BoostQueue {
  public:
    void push(T *x) {
      while(!q_.push(x))
        asm volatile("rep; nop" ::: "memory");
    }
    T* pop() {
      T *x;
      while(!q_.pop(x))
        asm volatile("rep; nop" ::: "memory");
      return x;
    }
  private:
    boost::lockfree::queue<T*, boost::lockfree::capacity<Q_SIZE>> q_;
};

static size_t __thread __thr_id;

inline size_t thr_id() { return __thr_id; }

inline void set_thr_id(size_t id) { __thr_id = id; }

static inline unsigned long tv_to_ms(const struct timeval &tv) {
  return ((unsigned long)tv.tv_sec * 1000000 + tv.tv_usec) / 1000;
}

template <class T, decltype(thr_id) ThrId = thr_id,
          unsigned long Q_SIZE = QUEUE_SIZE>
class LockFreeQueue {
 private:
  static const unsigned long Q_MASK = Q_SIZE - 1;
  struct ThrPos {
    unsigned long head, tail;
  };

 public:
  LockFreeQueue(size_t n_producers, size_t n_consumers)
      : n_producers_(n_producers),
        n_consumers_(n_consumers),
        head_(0),
        tail_(0),
        last_head_(0),
        last_tail_(0) {
    auto n = std::max(n_consumers_, n_producers_);
    thr_p_ = (ThrPos *)::memalign(getpagesize(), sizeof(ThrPos) * n);
    assert(thr_p_);
    ::memset((void *)thr_p_, 0xFF, sizeof(ThrPos) * n);
    ptr_array_ = (T **)::memalign(getpagesize(), Q_SIZE * sizeof(void *));
    assert(ptr_array_);
  }

  ~LockFreeQueue() {
    ::free(ptr_array_);
    ::free(thr_p_);
  }

  inline ThrPos &thr_pos() const {
    assert(ThrId() < std::max(n_consumers_, n_producers_));
    return thr_p_[ThrId()];
  }

  void push(T *ptr) {
    thr_pos().head = head_;
    thr_pos().head = __sync_fetch_and_add(&head_, 1);

    while (__builtin_expect(thr_pos().head >= last_tail_ + Q_SIZE, 0)) {
      auto min = tail_;
      for (size_t i = 0; i < n_consumers_; ++i) {
        auto tmp_t = thr_p_[i].tail;
        asm volatile("" ::: "memory");
        if (tmp_t < min) min = tmp_t;
      }
      last_tail_ = min;
      if (thr_pos().head < last_tail_ + Q_SIZE) break;
      _mm_pause();
    }
    ptr_array_[thr_pos().head & Q_MASK] = ptr;
    thr_pos().head = ULONG_MAX;
  }

  T *pop() {
    thr_pos().tail = tail_;
    thr_pos().tail = __sync_fetch_and_add(&tail_, 1);
    while (__builtin_expect(thr_pos().tail >= last_head_, 0)) {
      auto min = head_;
      for (size_t i = 0; i < n_producers_; ++i) {
        auto tmp_h = thr_p_[i].head;
        asm volatile("" ::: "memory");
        if (tmp_h < min) min = tmp_h;
      }
      last_head_ = min;
      if (thr_pos().tail < last_head_) break;
      _mm_pause();
    }
    T *ret = ptr_array_[thr_pos().tail & Q_MASK];
    thr_pos().tail = ULONG_MAX;
    return ret;
  }

 private:
  const size_t n_producers_, n_consumers_;
  unsigned long head_ ____cacheline_aligned;
  unsigned long tail_ ____cacheline_aligned;
  unsigned long last_head_ ____cacheline_aligned;
  unsigned long last_tail_ ____cacheline_aligned;
  ThrPos *thr_p_;
  T **ptr_array_;
};

static const auto N = QUEUE_SIZE * 1024;
static const auto CONSUMERS = 2;
static const auto PRODUCERS = 2;

typedef unsigned char q_type;

static const q_type X_EMPTY = 0;
static const q_type X_MISSED = 255;
q_type x[N * PRODUCERS];
std::atomic<int> n(0);

template <class Q>
struct Worker {
  Worker(Q *q, size_t id = 0) : q_(q), thr_id_(id) {}

  Q *q_;
  size_t thr_id_;
};

template <class Q>
struct Producer : public Worker<Q> {
  Producer(Q *q, size_t id) : Worker<Q>(q, id) {}
  void operator()() {
    set_thr_id(Worker<Q>::thr_id_);
    for (auto i = thr_id(); i < N * PRODUCERS; i += PRODUCERS) {
      x[i] = X_MISSED;
      Worker<Q>::q_->push(x + i);
    }
  }
};

template <class Q>
struct Consumer : public Worker<Q> {
  Consumer(Q *q, size_t id) : Worker<Q>(q, id) {}
  void operator()() {
    set_thr_id(Worker<Q>::thr_id_);
    while (n.fetch_add(1) < N * PRODUCERS) {
      q_type *v = Worker<Q>::q_->pop();
      assert(v);
      assert(*v == X_MISSED);
      *v = (q_type)(thr_id() + 1);
    }
  }
};

template <class Q>
void run_test(Q &&q) {
  std::thread thr[PRODUCERS + CONSUMERS];

  n.store(0);
  ::memset(x, X_EMPTY, N * sizeof(q_type) * PRODUCERS);

  struct timeval tv0, tv1;
  gettimeofday(&tv0, NULL);

  for (auto i = 0; i < PRODUCERS; ++i) thr[i] = std::thread(Producer<Q>(&q, i));

  ::usleep(10 * 1000);

  for (auto i = 0; i < CONSUMERS; ++i)
    thr[PRODUCERS + i] = std::thread(Consumer<Q>(&q, i));

  for (auto i = 0; i < CONSUMERS + PRODUCERS; ++i) thr[i].join();

  gettimeofday(&tv1, NULL);

  std::cout << (tv_to_ms(tv1) - tv_to_ms(tv0)) << "ms" << std::endl;

  auto res = 0;
  std::cout << "check X data..." << std::endl;

  for (auto i = 0; i < N * PRODUCERS; ++i) {
    if (x[i] == X_EMPTY) {
      std::cout << "empty " << i << std::endl;
      res = 1;
      break;
    } else if (x[i] == X_MISSED) {
      std::cout << "missed " << i << std::endl;
      res = 2;
      break;
    }
  }
  std::cout << (res ? "Failed" : "Passed") << std::endl;
}

int main() {
//  NaiveQueue<q_type> n_q;
//  run_test<NaiveQueue<q_type>>(std::move(n_q));

  LockFreeQueue<q_type> lf_q(PRODUCERS, CONSUMERS);
  run_test<LockFreeQueue<q_type>>(std::move(lf_q));

//  BoostQueue<q_type> b_q;
//  run_test<BoostQueue<q_type>>(std::move(b_q));

  return 0;
}
